Readability code review:
Author: Emil Pang
Date: 10/1/2022
Sprint: 2
CS file being reviewed: Client.cs
Author of file: Adam Perhala
Number of minutes: 30
Comments on code readability:
While the code has minimal comments, given the functions are short and the code reads well, it is relatively easy to understand what each function does. When comments do exist, they help as they are concise and relevant. Instances include reading the next message if it exists (return is not null) in ReadLatestMessage() and client.ReadMessage() in StartClient() (message can be ignored for now). However, comments for general functionality of the class and for each method would provide a good overview.
Some of the functionalities are not fully implemented with no reason given. These include events EnabledChanged and UpdateOrderChanged, and lambda functions Enabled and UpdateOrder. However, as these are relatively small parts, it does not decrease from code readability other than question of intent.
Syntactically the code is very readable, with mostly consistant spacing (other than a couple of double/triple lines of space). Method names are all capitalized per C# standards, and private variables use camel case.
Overall, this code is very readable.

Code quality code review:
Author: Emil Pang
Date: 10/1/2022
Sprint: 2
CS file being reviewed: Server.cs
Author of file: Adam Perhala
Comments on code maintainability: 
The code seems to be cohesive overall, with only four functions to maintain the server side: StartServer(), ReadMessages(), SendUpdate(), and ReadUpdate(). Each functions does what it says it will do in the method name using logically connected statements. For instance, the ReadMessages() function reads messages when incoming and prescribes an action based on that message.
For the most part, this code is also loosely coupled, with method functionality being very easy to add to. The only method that seems more tightly coupled is the ReadUpdate() method, where the boolean "running" is set depending on the key read as pressed.
Hypothetical changes could include offloading some of the code in ReadMessages() to other, private functions so it is shorter. Some of this code could be the switch-case when determining action based on the MessageType from the message. ReadUpdate() could also be more loosely coupled by putting the key to state in a dictionary, since there will be more states to hold other than running, but this seems minor.

