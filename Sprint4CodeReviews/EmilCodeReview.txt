Readability code review:
Author: Emil Pang
Date: 10/22/2022
Sprint: 3
CS file being reviewed: GameObjectManager.cs
Author of file: Adam Perhala
Number of minutes: 30 minutes
Comments on code readability:
Note: PopulateCollisionResolutionDic is not part of this code review as it was made by a different author.
Although there is minimal documentation, the code is still relatively easy to read. For instance, functions AddObject and RemoveObject clearly are objects that will be added/removed to GameObjectManager (GOM) and updated/drawn. Some parts would be easier to read with comments as it is not immediately clear why they are designed in a certain way. For instance, why RemoveObject does not remove the object from the drawables/updateables lists immediately (within that function).
Overall, function lengths are kept very short which makes them very easy to understand, such as AddObject, RemoveObject, addProjectile, removeProjectile, etc., but others are perhaps very long, such as Update and UpdatePlayerSprite. Despite this (as there are plans to refactor these into dictionary key calls), they are easy to read. UpdatePlayerSprite for example gets the direction based on the velocity, then depending on whether the sprite is taking damage and its state (running, attacking, standing, throwing) assigns the correct sprite.
For Update, part of the length comes from attacking and damaging code which can be put in a separate function, but it is not part of this code review as author is different. Most of the length is from adding/removing objects depending on what they are to different lists, such as updateables, drawables, projectiles, etc. These could also be put into separate functions to reduce length.
General C# standards are followed, with correct capitalization of variables, method names, and properties. Spacing is very consistent (one line between functions, one line between statement groups).
Overall, this code is very readable.

Code quality code review:
Author: Emil Pang
Date: 10/22/2022
Sprint: 3
CS file being reviewed: PlayerCommands.cs
Author of file: Adam Perhala
Comments on code maintainability: 
For background purposes, PlayerCommands is a significant rehaul of the player commands so that they are not scattered throughout the project, which includes the player running, standing, attacking, and other actions.
Cohesion appears strong, with all the internal class Execute functions only updating the player when the command is triggered. Although this is more to do with readability, the fact that functions are short greatly contributes to ensuring that these functions are cohesive. For instance, the PlayerRunningCommand class' Execute function simply modifies the direction, state, and velocity, all of which are important and relevant to that command.
In terms of coupling, the fact that commands can be easily swapped out for different ones makes this code easy to extend with other commands. Likewise, commands are not easily modifable, which fits the philosophy "unmodifiable, but extendable". The fact that we can call UpdatePlayerState or UpdatePlayerSprite as well from GOM makes it easy to construct significantly different commands without having to deviate too much. In other words, differences are constrained but still flexible.
Some possible changes include a separate velocity function since there are some very specific bugs pertaining to Link's movement (this is set in the backlog). Furthermore, although switch-cases are not necessarily indicative of code maintainability problems, it may be better to consolidate these somehow since all player commands deal with this.

